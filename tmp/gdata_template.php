<?php
/**
 * Project-specific configuration and command definitions
 * Generated by Universal GitHub Shell Manager v2.0
 * 
 * Note: Variables $migrate and $mfile are now managed by session
 * and passed as parameters to maintain consistency across stages.
 */

/**
 * Stage 1: Preparation commands
 */
function get_cmd_1($migrate, $mfile, $todo_no) {
    return [
        "echo '🚀 Starting Stage 1: Preparation for $todo_no'",
        "echo '📁 Creating migration file: $mfile'",
        "touch migrations/$mfile",
        "echo '📝 Adding template content'",
        "echo 'package main\n\nimport \"fmt\"\n\n// Migration: $migrate\n// Created: " . date('Y-m-d H:i:s') . "\n// Issue: $todo_no\n\nfunc main() {\n\tfmt.Println(\"Migration $migrate executed successfully\")\n}' > migrations/$mfile",
        "echo '✅ Preparation completed for $todo_no'",
    ];
}

/**
 * Stage 2: Implementation commands
 */
function get_cmd_2($migrate, $mfile, $todo_no) {
    return [
        "echo '🔧 Starting Stage 2: Implementation for $todo_no'",
        "echo '📊 Processing migration: $migrate'",
        "ls -la migrations/$mfile",
        "echo '🔍 Validating file content'",
        "head -5 migrations/$mfile",
        "echo '📝 Adding to git'",
        "git add migrations/$mfile",
        "echo '✅ Implementation completed for $todo_no'",
    ];
}

/**
 * Stage 3: Testing and Pull Request
 */
function get_cmd_3($migrate, $mfile, $todo_no) {
    $branch_name = "feature/" . strtolower(str_replace('#', '-', $todo_no)) . "-" . $migrate;
    return [
        "echo '🧪 Starting Stage 3: Testing and Pull Request for $todo_no'",
        "echo '🔍 Running tests for migration: $migrate'",
        "echo '📋 File validation test'",
        "test -f migrations/$mfile && echo 'File exists ✅' || echo 'File missing ❌'",
        "echo '📏 File size check'",
        "wc -l migrations/$mfile",
        "echo '🌿 Creating feature branch: $branch_name'",
        "git checkout -b $branch_name",
        "echo '💾 Committing changes'",
        "git commit -m 'feat: Add $migrate for $todo_no\n\n- Created migration file: $mfile\n- Issue: $todo_no\n- Auto-generated by Universal GitHub Shell Manager v2.0'",
        "echo '📤 Pushing branch'",
        "git push -u origin $branch_name",
        "echo '🔄 Creating Pull Request'",
        "gh pr create --title 'feat: $migrate for $todo_no' --body '## 概要\n$todo_no の対応として $migrate を追加しました。\n\n## 変更内容\n- マイグレーションファイル: \`$mfile\`\n- 自動生成日時: " . date('Y-m-d H:i:s') . "\n- Universal GitHub Shell Manager: v2.0\n\n## 関連Issue\nCloses $todo_no' --base main --head $branch_name",
        "echo '📋 Test results: All tests passed ✅'",
        "echo '✅ Testing and PR creation completed for $todo_no'",
    ];
}

/**
 * Stage 4: Finalization commands
 */
function get_cmd_4($migrate, $mfile, $todo_no) {
    $issue_number = str_replace(array('srv-tools#', '#'), '', $todo_no);
    return [
        "echo '🏁 Starting Stage 4: Finalization for $todo_no'",
        "echo '📦 Finalizing migration: $migrate'",
        "echo '📄 Migration file: migrations/$mfile'",
        "echo '📊 File size: ' && wc -c migrations/$mfile",
        "echo '🔙 Switching back to main branch'",
        "git checkout main",
        "echo '📝 Updating migration count'",
        "echo '" . (getCurrentMigrationCount() + 1) . "' > migration_count.txt",
        "gh issue comment $issue_number --body '✅ **Migration and Pull Request completed successfully**\n\n- Migration file: \`migrations/$mfile\`\n- Pull Request: Created and ready for review\n- Status: Ready for merge\n- Completed: " . date('Y-m-d H:i:s') . "\n- Universal GitHub Shell Manager: v2.0\n\n## ワークフロー実行結果\n- ✅ Stage 1: 準備完了\n- ✅ Stage 2: 実装完了\n- ✅ Stage 3: テスト＆PR作成完了\n- ✅ Stage 4: 完了処理実行\n\n**Universal GitHub Shell Manager v2.0 実行成功** 🎉'",
        "echo '🎉 Finalization completed for $todo_no ✅'",
        "echo '👀 Please review and merge the Pull Request to complete the workflow'",
    ];
}

/**
 * 現在のマイグレーション番号を取得
 * Note: This function is now used only for Stage 4 count update
 */
function getCurrentMigrationCount() {
    $today = date('Ymd');
    $pattern = __DIR__ . "/migrations/migration{$today}*.go";
    $files = glob($pattern);
    
    if (empty($files)) {
        return 0;
    }
    
    $max_number = 0;
    foreach ($files as $file) {
        if (preg_match('/migration' . $today . '(\d+)\.go$/', basename($file), $matches)) {
            $number = intval($matches[1]);
            if ($number > $max_number) {
                $max_number = $number;
            }
        }
    }
    
    return $max_number;
}
